{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","html","setHTML","filename","setFileName","downloadPDF","pdf","linkSource","downloadLink","document","createElement","fileName","href","download","console","log","click","className","target","src","editor","ClassicEditor","data","onChange","event","getData","onSubmit","e","preventDefault","axios","post","then","response","content","catch","error","htmlFor","type","name","id","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"+SA4EeA,MAnEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACLC,EADK,KACAC,EADA,OAEmBF,mBAAS,UAF5B,mBAELG,EAFK,KAEIC,EAFJ,KAiBLC,EAAc,SAACF,EAASG,GAC5B,IAAMC,EAAU,sCAAkCD,GAC5CE,EAAeC,SAASC,cAAc,KACtCC,EAAWR,EACjBK,EAAaI,KAAOL,EACpBC,EAAaK,SAAWF,EACxBG,QAAQC,IAAIP,GACZA,EAAaQ,SAEjB,OACE,6BACA,yBAAKC,UAAU,WAAf,0BACA,yBAAKA,UAAU,UACf,uBAAGL,KAAK,6CAA6CM,OAAO,UAC1D,yBAAKC,IAAI,8DAIX,yBAAKF,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,CACEG,OAAQC,IACRC,KAAMrB,EACNsB,SAAU,SAACC,EAAMJ,GACf,IAAME,EAAOF,EAAOK,UACpBvB,EAAQoB,OAKd,6BACA,0BAAMI,SA3Ca,SAACC,GACtBA,EAAEC,iBACAC,IAAMC,KAAK,oBAAoB,CAAC3B,WAAUF,SACvC8B,MAAK,SAAUC,GACdlB,QAAQC,IAAIiB,GACZ3B,EAAY2B,EAASV,KAAKnB,SAAS6B,EAASV,KAAKW,YAElDC,OAAM,SAAUC,GACfrB,QAAQC,IAAIoB,QAoChB,wBAAIlB,UAAU,kBACZ,gCAAK,2BAAOmB,QAAQ,YAAf,cAGJ,gCAAK,2BAAOC,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAWhB,SAAU,SAACI,GAAD,OAAOvB,EAAYuB,EAAET,OAAOsB,WAE9F,4BACA,4BAAQH,KAAK,SAASpB,UAAU,kBAAhC,iBCrDSwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASwC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMoB,c","file":"static/js/main.b9a3797b.chunk.js","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport axios from 'axios';\n\n\n\n\nfunction App() {\n   const [html,setHTML] = useState('');\n   const [filename,setFileName] = useState('Sample');\n\n\n   const submitHandler = (e) => {\n    e.preventDefault();\n      axios.post(\"/service/generate\",{filename, html})\n        .then(function (response) {\n          console.log(response);\n          downloadPDF(response.data.filename,response.data.content)\n         })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }  \n\n    const downloadPDF = (filename,pdf) => {\n      const linkSource = `data:application/pdf;base64,${pdf}`;\n      const downloadLink = document.createElement(\"a\");\n      const fileName = filename;\n      downloadLink.href = linkSource;\n      downloadLink.download = fileName;\n      console.log(downloadLink);\n      downloadLink.click();\n  }\n  return (\n    <div>\n    <div className=\"topside\">Generate PDF on the Fly\n    <div className=\"github\">\n    <a href=\"https://github.com/utsabc/htmltopdfservice\" target=\"_blank\">\n      <img src=\"https://img.icons8.com/doodle/48/000000/github--v1.png\"/>\n    </a>\n    </div>\n    </div>\n    <div className=\"App\">\n      <div className=\"editor\">\n        <CKEditor\n          editor={ClassicEditor}\n          data={html}\n          onChange={(event,editor)=>{\n            const data = editor.getData();\n            setHTML(data);\n          }}\n          />\n\n      </div>\n      <div>\n      <form onSubmit={submitHandler}>\n      <ul className=\"form-container\">\n        <li> <label htmlFor=\"fileName\">\n             File-Name\n            </label></li>\n         <li> <input type=\"fileName\" name=\"fileName\" id=\"fileName\" onChange={(e) => setFileName(e.target.value)}>\n            </input></li>\n           <li>\n           <button type=\"submit\" className=\"button primary\">Submit</button>\n           </li>\n            \n            </ul>\n        </form>\n      </div>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}